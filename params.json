{"name":"Memcached Manager","tagline":"The definitive solution to manage your memcached server.","body":"Did you ever try to read all keys that are in memcached and found out that memcached have no command that allows it?\r\n\r\nDo you miss being able to actually know what is inside your memcached server effortlessly?\r\n\r\nI did want that, so I've built it. Check it out:\r\n\r\n(image of menu)\r\n- Check how much time is left for any key to expire or how much size it occupies.\r\n\r\n(image of search)\r\n- Find any key you want. (made in angular.js)\r\n\r\n(terminal mode image)\r\n- Type anything on a terminal connection directly with the memcached server, no need to telnet anymore.\r\n\r\n(image with crud stuff)\r\n- A CRUD for your memcached server: Create, Read, Update or Delete any key without using an archaic direct telnet connection.\r\n\r\nAll that packaged in a slick web interface, just install it and use it! It's also pluggable to any rack/rails application with -one line-.\r\n\r\n### Ok, I want it. How do I install?\r\n\r\n1. Install the gem.\r\n\r\n    gem install memcached-manager\r\n    \r\n2. Run memcached-manager with your memcached up\r\n\r\n    memcached-manager\r\n\r\nIf your memcached is running on a different domain or port(locahost:11211):\r\n\r\n    memcached-manager -H foo.bar -P 1337\r\n\r\nor\r\n\r\n    memcached-manager --memcached-host foo.bar --memcached-port 1337\r\n\r\n### Plugging memcached manager to an existing Rails app\r\n\r\nJust mount it in your routes(config/routes.rb) file:\r\n\r\n    mount MemcachedManager::Routes, :at => '/mm'\r\n\r\nSo it will be accessible in the \"/mm\" route of your application.\r\n\r\nIf you want to specify a different config than the defaults(localhost:11211) add an +.env+ file with the following:\r\n\r\n    memcached_host: foo.bar\r\n    memcached_port: 1337\r\n\r\n### Requirements\r\n\r\n    Ruby >= 1.9\r\n    Memcached (of course)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}